import React, { useEffect, useState } from "react";
import { Table, Tag, Spin, Button, Popconfirm, message } from "antd";
import dayjs from "dayjs";
import api from "../api/axios";

export default function AccountTable() {
    const [accounts, setAccounts] = useState([]);
    const [loading, setLoading] = useState(true);

    const statusColors = {
        success: "green",
        failure: "red",
        pending: "orange",
        in_progress: "orange",
    };

    const fetchAccounts = async () => {
        setLoading(true);
        try {
            const { data } = await api.get("/users/{user_id}/vk_accounts/all");
            // üëá —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ id DESC –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–æ–º
            const sortedData = [...data].sort((a, b) => b.id - a.id);
            setAccounts(sortedData);
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", err);
            message.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchAccounts();
    }, []);

    // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    const handleDelete = async (id) => {
        try {
            await api.delete(`/users/{user_id}/vk_accounts/${id}`);
            message.success("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω");
            fetchAccounts(); // –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
        } catch (err) {
            console.error(err);
            message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞");
        }
    };

    const columns = [
        // üëá –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É ID, —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å)
        {
            title: "ID",
            dataIndex: "id",
            key: "id",
            sorter: (a, b) => a.id - b.id,
            defaultSortOrder: "descend",
            width: 90,
        },
        { title: "ID VK", dataIndex: "vk_account_id", key: "vk_account_id" },
        {
            title: "VK –ê–∫–∫–∞—É–Ω—Ç",
            key: "vk_account_url",
            render: (_, record) => (
                <a
                    href={record.vk_account_url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="hover:underline text-blue-500 flex items-center gap-2"
                >
                    <img
                        src={record.avatar_url}
                        alt={record.name}
                        className="w-6 h-6 rounded-full"
                    />
                    {`${record.name ?? ""} ${record.second_name ?? ""}`}
                </a>
            ),
        },
        { title: "Login", dataIndex: "login", key: "login" },
        {
            title: "ID Proxy",
            dataIndex: "proxy_id",
            key: "proxy_id",
            render: (val) => val ?? "-",
        },
        { title: "VK –ü–∞–±–ª–∏–∫–∏", dataIndex: "groups_count", key: "groups_count" },
        {
            title: "–§–ª—É–¥–∫–æ–Ω—Ç—Ä–æ–ª—å",
            key: "floodControl",
            render: (_, record) => {
                if (record.flood_control && record.flood_control_time) {
                    return dayjs(record.flood_control_time).format("YYYY-MM-DD HH:mm");
                }
                return "–ù–µ—Ç";
            },
        },
        {
            title: "–ü–∞—Ä—Å–∏–Ω–≥",
            dataIndex: "parse_status",
            key: "parse_status",
            render: (status) =>
                status ? (
                    <Tag color={statusColors[status] || "default"}>
                        {status.toUpperCase()}
                    </Tag>
                ) : (
                    "-"
                ),
        },
        {
            title: "–¢–∏–ø",
            dataIndex: "account_type",
            key: "account_type",
            filters: [
                { text: "main", value: "main" },
                { text: "connect", value: "connect" },
                { text: "backup", value: "backup" },
                { text: "posting", value: "posting" },
                { text: "blocked", value: "blocked" },
            ],
            onFilter: (value, record) => record.account_type === value,
        },
        {
            title: "–ö—É–∫–∏",
            dataIndex: "cookies",
            key: "cookies",
            render: (cookies) => (cookies ? "–ï—Å—Ç—å" : "‚Äî"),
        },
        {
            title: "–î–µ–π—Å—Ç–≤–∏—è",
            key: "actions",
            render: (_, record) => (
                <Popconfirm
                    title="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?"
                    okText="–î–∞"
                    cancelText="–ù–µ—Ç"
                    onConfirm={() => handleDelete(record.id)}
                >
                    <Button danger size="small">
                        –£–¥–∞–ª–∏—Ç—å
                    </Button>
                </Popconfirm>
            ),
        },
    ];

    return (
        <div className="mt-8">
            <h2 className="text-lg font-semibold mb-4">–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã</h2>
            <Spin spinning={loading}>
                <Table
                    rowKey="id"
                    columns={columns}
                    dataSource={accounts}
                    bordered
                    className="shadow-md"
                    pagination={{ pageSize: 10 }}
                />
            </Spin>
        </div>
    );
}